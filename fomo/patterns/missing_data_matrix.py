# ADD ABILITY TO DO FRACTIONS

import pandas as pd
from flag_missing_data import flag_missing_data

def missing_data_matrix(flagged_df, basis_rate=15, missingness_interval=15):
    """
    Converts missing flagged data into matrix where each row is one participant
    and each column is one time point. The Value in each index represents 
    missingness as a boolean.

    Parameters:
    - flagged_df: DataFrame with 'Missing_Flag' column generated by flag_missing_data()
    - basis_rate: Integer, how big of a gap there is between data points in output table in minutes
    - missingness_interval: For fractional missingness, how big of interval to consider in final matrix.
    Fractional missingness = (number of basis_rate intervals with data)/(how many basis_rate intervals
    within missingness_interval)

    Returns: 
    - DataFrame matrix as described
    """

    # Check if flagged_df has Missing Flag column
    if 'Missing_Flag' not in flagged_df.columns:
        raise Exception("No Missing Flags in provided dataframe")

    # Check if missingness_interval > basis_rate
    if missingness_interval > basis_rate:
        raise Exception("Resampling Error: missingness_interval must be greater than basis_rate.")

    # Create matrix
    matrix = flagged_df.pivot(index='person_id', columns='datetime', values='Missing_Flag')

    return matrix
     

"""
Future possibilities:
- Take in interval_size to resample based on missing_flags (i.e. resample to hour, and use decimal
value for missingness that is the percent of non missing data there was in already flagged data based
on missing_flag column)
"""

def run_mdm():

    heart_rate_data = pd.read_csv('sample_hr.csv')
    heart_rate_data = heart_rate_data.drop('Unnamed: 0', axis=1)
    #print(heart_rate_data)

    flagged_data = flag_missing_data(heart_rate_data, 'heart_rate')
    print(flagged_data)

    matrix = missing_data_matrix(flagged_data)
    matrix.to_csv('output_matrix.csv')
    

if __name__ == "__main__":
    run_mdm()